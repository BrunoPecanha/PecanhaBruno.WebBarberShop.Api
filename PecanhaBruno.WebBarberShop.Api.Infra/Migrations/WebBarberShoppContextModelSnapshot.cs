// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pecanha.WebBaberShopp.Infra.Context;

namespace PecanhaBruno.WebBarberShop.Infra.Migrations
{
    [DbContext(typeof(WebBarberShoppContext))]
    partial class WebBarberShoppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PecanhaBruno.WebBarberShop.Domain.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Activated")
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Address")
                        .HasColumnName("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cnpj")
                        .HasColumnName("Cnpj")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ConfirmationNotice")
                        .HasColumnName("ConfirmationNotice")
                        .HasColumnType("bit");

                    b.Property<string>("FantasyName")
                        .HasColumnName("FantasyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LastQueueId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnName("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Logo")
                        .HasColumnName("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RealName")
                        .HasColumnName("RealName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisteringDate")
                        .HasColumnName("RegisteringDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("UseQueue")
                        .HasColumnName("UseQueue")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnName("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Company");
                });

            modelBuilder.Entity("PecanhaBruno.WebBarberShop.Domain.Entities.CurrentQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FinalizationTime")
                        .HasColumnName("FinalizationTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsWorking")
                        .HasColumnName("IsWorking")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnName("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RegisteringDate")
                        .HasColumnName("RegisteringDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Queue");
                });

            modelBuilder.Entity("PecanhaBruno.WebBarberShop.Domain.Entities.Custumer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnName("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CurrentCustomerInService")
                        .HasColumnName("CurrentCustomerInService")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FinalizationDateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsServiceDone")
                        .HasColumnName("IsServiceDone")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnName("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("QueueId")
                        .HasColumnType("int");

                    b.Property<int>("QueuePosition")
                        .HasColumnName("QueuePosition")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisteringDate")
                        .HasColumnName("RegisteringDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QueueId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("UserId");

                    b.ToTable("Custumer");
                });

            modelBuilder.Entity("PecanhaBruno.WebBarberShop.Domain.Entities.CustumerXServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustumerId")
                        .HasColumnName("CustumerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnName("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RegisteringDate")
                        .HasColumnName("RegisteringDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceId")
                        .HasColumnName("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustumerId");

                    b.HasIndex("ServiceId");

                    b.ToTable("CustumerServices");
                });

            modelBuilder.Entity("PecanhaBruno.WebBarberShop.Domain.Entities.DayBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnName("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("QueueId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisteringDate")
                        .HasColumnName("RegisteringDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ScheduleDayId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("QueueId")
                        .IsUnique()
                        .HasFilter("[QueueId] IS NOT NULL");

                    b.HasIndex("ScheduleDayId")
                        .IsUnique()
                        .HasFilter("[ScheduleDayId] IS NOT NULL");

                    b.ToTable("DayBalance");
                });

            modelBuilder.Entity("PecanhaBruno.WebBarberShop.Domain.Entities.ScheduleDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CurrentId")
                        .HasColumnType("int");

                    b.Property<int?>("DayBalanceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnName("EndTime")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("EstimatedTimeToNext")
                        .HasColumnName("EstimatedTimeToNext")
                        .HasColumnType("DateTime");

                    b.Property<int?>("LastId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnName("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NextId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisteringDate")
                        .HasColumnName("RegisteringDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnName("StartTime")
                        .HasColumnType("DateTime");

                    b.HasKey("Id");

                    b.HasIndex("CurrentId");

                    b.HasIndex("LastId");

                    b.HasIndex("NextId");

                    b.ToTable("ScheduleDay");
                });

            modelBuilder.Entity("PecanhaBruno.WebBarberShop.Domain.Entities.ScheduleDayXCustumers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustumerId")
                        .HasColumnName("CustumerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnName("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RegisteringDate")
                        .HasColumnName("RegisteringDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ScheduleDayId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleDayId");

                    b.ToTable("ScheduleDayCustumers");
                });

            modelBuilder.Entity("PecanhaBruno.WebBarberShop.Domain.Entities.ServiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Activated")
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnName("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MediumTime")
                        .HasColumnName("MediumTime")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("Price")
                        .HasColumnName("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("RegisteringDate")
                        .HasColumnName("RegisteringDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("ServiceType");
                });

            modelBuilder.Entity("PecanhaBruno.WebBarberShop.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Activated")
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnName("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnName("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnName("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastVisitDate")
                        .HasColumnName("LastVisitDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MobileInfo")
                        .HasColumnName("MobileInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Owner")
                        .HasColumnName("Owner")
                        .HasColumnType("bit");

                    b.Property<string>("PassWord")
                        .HasColumnName("PassWord")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasColumnName("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisteringDate")
                        .HasColumnName("RegisteringDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SysUser");
                });

            modelBuilder.Entity("PecanhaBruno.WebBarberShop.Domain.Entities.Company", b =>
                {
                    b.HasOne("PecanhaBruno.WebBarberShop.Domain.Entities.User", "User")
                        .WithOne("Company")
                        .HasForeignKey("PecanhaBruno.WebBarberShop.Domain.Entities.Company", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PecanhaBruno.WebBarberShop.Domain.Entities.CurrentQueue", b =>
                {
                    b.HasOne("PecanhaBruno.WebBarberShop.Domain.Entities.Company", "Company")
                        .WithMany("Queue")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PecanhaBruno.WebBarberShop.Domain.Entities.Custumer", b =>
                {
                    b.HasOne("PecanhaBruno.WebBarberShop.Domain.Entities.CurrentQueue", "CurrentQueue")
                        .WithMany("Custumers")
                        .HasForeignKey("QueueId");

                    b.HasOne("PecanhaBruno.WebBarberShop.Domain.Entities.ScheduleDay", "ScheduleDay")
                        .WithMany("Custumers")
                        .HasForeignKey("ScheduleId");

                    b.HasOne("PecanhaBruno.WebBarberShop.Domain.Entities.User", "User")
                        .WithMany("Custumer")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PecanhaBruno.WebBarberShop.Domain.Entities.CustumerXServices", b =>
                {
                    b.HasOne("PecanhaBruno.WebBarberShop.Domain.Entities.Custumer", "Custumer")
                        .WithMany("CustumerServices")
                        .HasForeignKey("CustumerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PecanhaBruno.WebBarberShop.Domain.Entities.ServiceType", "Service")
                        .WithMany("CustumerServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PecanhaBruno.WebBarberShop.Domain.Entities.DayBalance", b =>
                {
                    b.HasOne("PecanhaBruno.WebBarberShop.Domain.Entities.Company", "Company")
                        .WithMany("DayBalances")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PecanhaBruno.WebBarberShop.Domain.Entities.CurrentQueue", "Queue")
                        .WithOne("DayBalance")
                        .HasForeignKey("PecanhaBruno.WebBarberShop.Domain.Entities.DayBalance", "QueueId");

                    b.HasOne("PecanhaBruno.WebBarberShop.Domain.Entities.ScheduleDay", "ScheduleDay")
                        .WithOne("DayBalance")
                        .HasForeignKey("PecanhaBruno.WebBarberShop.Domain.Entities.DayBalance", "ScheduleDayId");
                });

            modelBuilder.Entity("PecanhaBruno.WebBarberShop.Domain.Entities.ScheduleDay", b =>
                {
                    b.HasOne("PecanhaBruno.WebBarberShop.Domain.Entities.Custumer", "Current")
                        .WithMany()
                        .HasForeignKey("CurrentId");

                    b.HasOne("PecanhaBruno.WebBarberShop.Domain.Entities.Custumer", "Last")
                        .WithMany()
                        .HasForeignKey("LastId");

                    b.HasOne("PecanhaBruno.WebBarberShop.Domain.Entities.Custumer", "Next")
                        .WithMany()
                        .HasForeignKey("NextId");
                });

            modelBuilder.Entity("PecanhaBruno.WebBarberShop.Domain.Entities.ScheduleDayXCustumers", b =>
                {
                    b.HasOne("PecanhaBruno.WebBarberShop.Domain.Entities.ScheduleDay", "ScheduleDay")
                        .WithMany()
                        .HasForeignKey("ScheduleDayId");
                });

            modelBuilder.Entity("PecanhaBruno.WebBarberShop.Domain.Entities.ServiceType", b =>
                {
                    b.HasOne("PecanhaBruno.WebBarberShop.Domain.Entities.Company", "Company")
                        .WithMany("ServiceTypes")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
